// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package repository

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, login, password_hash) VALUES ($1, $2, $3)
`

type CreateUserParams struct {
	ID           string
	Login        string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.ID, arg.Login, arg.PasswordHash)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, login, password_hash FROM users WHERE login = $1
`

func (q *Queries) GetUser(ctx context.Context, login string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, login)
	var i User
	err := row.Scan(&i.ID, &i.Login, &i.PasswordHash)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET login = $1, password_hash = $2 WHERE id = $3
`

type UpdateUserParams struct {
	Login        string
	PasswordHash string
	ID           string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Login, arg.PasswordHash, arg.ID)
	return err
}
